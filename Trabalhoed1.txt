#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct no{
    int codigo;
    char nome[30];
    float valorUnitario;
    struct no *prox;

} noptr;

noptr *insere_lista(noptr *lista, noptr *novo, int valor, char nome[], float valorUnitario){
    novo->codigo= valor;
    int i;
    //for(i=0;i<strlen(nome)+1;i++){
     //   novo->nome[i] = nome[i];
    //}
    strcpy(novo->nome, nome);
    novo->valorUnitario=valorUnitario;

    if(lista==NULL){
        novo->prox=NULL;
    }
    else{
        novo->prox=lista;
    }
    lista = novo;
    return lista;
}


void imprimir(noptr *lista){
    noptr *p;
    if(lista == NULL){
        printf("lista vazia");
        return;
    }

    p = lista;
    printf("\nLista: \n");
    while(p){
        printf("Codigo: %d ... %x\n", p->codigo, p);
        printf("Nome: %s", p->nome);
        printf("Valor unitario: %.2f\n", p->valorUnitario);
        p = p->prox;
    }
    printf("\n");

}

noptr *trocar(noptr *lista){
    noptr *p1Ant, *p1, *p2Ant, *p2, *pAux;
    int num1, num2;
    float vlrAux;
    printf("Digite o primeiro codigo que deseja trocar: \n");
    scanf("%d", &num1);
    printf("Digite o segundo codigo que deseja trocar: \n");
    scanf("%d", &num2);

    p1 = lista;
    while(p1->codigo != num1 && p1->prox != NULL){
        p1Ant = p1;
        p1 = p1->prox;
    }


    p2 = lista;
    while(p2->codigo != num2 && p2->prox != NULL){
        p2Ant = p2;
        p2 = p2->prox;
    }

    if(p1 == lista){
        if(p1->prox == p2){
            pAux = p1->prox;
            p1->prox = p2->prox;
            p2->prox = p1;
            lista = p2;
            vlrAux = p1->valorUnitario;
            p1->valorUnitario = p2->valorUnitario;
            p2->valorUnitario = vlrAux;
            return lista;
        }
        pAux = p1->prox;
        p1->prox = p2->prox;
        p2Ant->prox = p1;
        lista = p2;
        p2->prox = pAux;
        lista = p2;
        vlrAux = p1->valorUnitario;
        p1->valorUnitario = p2->valorUnitario;
        p2->valorUnitario = vlrAux;
        return lista;
    }

    if(p1->prox == p2){
        p1->prox = p2->prox;
        pAux = p1;
        p1Ant->prox = p2;
        p2->prox = pAux;
        vlrAux = p1->valorUnitario;
        p1->valorUnitario = p2->valorUnitario;
        p2->valorUnitario = vlrAux;
        return lista;
    }

    pAux = p1->prox;
    p1->prox = p2->prox;
    p2Ant->prox = p1;
    p1Ant->prox = p2;
    p2->prox = pAux;
    vlrAux = p1->valorUnitario;
    p1->valorUnitario = p2->valorUnitario;
    p2->valorUnitario = vlrAux;
    return lista;

}

int verificaCodigo(noptr *lista, int codigo){
    noptr *aux;
    aux = lista;
    while(aux){
        if(codigo == aux->codigo){
            printf("cdg: %d\n", aux->codigo);
            return 1;
        }
        aux = aux->prox;
    }
    return 0;
}

int main()
{
    int codigo, verifica;
    noptr *lista;
    lista = NULL;
    noptr *info;
    char nome[30];
    char nomeProduto[30];
    float valorUnitario;


    do{
        info = (struct no *) malloc (sizeof(noptr));
        if(info == NULL){
            printf("\nSem memoria");
            return 0;
        }
        printf("\nDigite o codigo do produto ou 0 para nao preencher: ");
        scanf("%d", &codigo);
        verifica = verificaCodigo(lista, codigo);
        if(verifica == 0){
        setbuf(stdin, NULL);
            if(codigo != 0){
                setbuf(stdin, NULL);
                printf("Digite o nome do produto: \n");
                fgets(nome, 30, stdin);
                strcpy(nomeProduto, nome);
                printf("Digite o valor unitario: \n");
                scanf("%f", &valorUnitario);
                lista = insere_lista(lista, info, codigo, nomeProduto, valorUnitario);
            }
    } else{
        printf("codigo ja cadastrado. ");
    }

    }while(codigo != 0);

    int opcao;
    do{
        printf("1. mostrar lista, 2. inverter celulas, 0. encerrar\n");
        scanf("%d", &opcao);
        if(opcao == 1){
            imprimir(lista);
        } else if(opcao == 2){
            lista = trocar(lista);
        }
    }while(opcao != 0);



    return 0;
}

